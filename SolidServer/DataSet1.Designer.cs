//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ConsoleApp1 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private AdjacmentResearchDataTable tableAdjacmentResearch;
        
        private AdjacmentResearchsDataTable tableAdjacmentResearchs;
        
        private AreasDataTable tableAreas;
        
        private DbscanResearchDataTable tableDbscanResearch;
        
        private DbScanResearchsDataTable tableDbScanResearchs;
        
        private ElementsDataTable tableElements;
        
        private MeshParamsDataTable tableMeshParams;
        
        private NodesDataTable tableNodes;
        
        private PointsDataTable tablePoints;
        
        private StrainNodeParametersDataTable tableStrainNodeParameters;
        
        private StressNodeParametersDataTable tableStressNodeParameters;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AdjacmentResearch"] != null)) {
                    base.Tables.Add(new AdjacmentResearchDataTable(ds.Tables["AdjacmentResearch"]));
                }
                if ((ds.Tables["AdjacmentResearchs"] != null)) {
                    base.Tables.Add(new AdjacmentResearchsDataTable(ds.Tables["AdjacmentResearchs"]));
                }
                if ((ds.Tables["Areas"] != null)) {
                    base.Tables.Add(new AreasDataTable(ds.Tables["Areas"]));
                }
                if ((ds.Tables["DbscanResearch"] != null)) {
                    base.Tables.Add(new DbscanResearchDataTable(ds.Tables["DbscanResearch"]));
                }
                if ((ds.Tables["DbScanResearchs"] != null)) {
                    base.Tables.Add(new DbScanResearchsDataTable(ds.Tables["DbScanResearchs"]));
                }
                if ((ds.Tables["Elements"] != null)) {
                    base.Tables.Add(new ElementsDataTable(ds.Tables["Elements"]));
                }
                if ((ds.Tables["MeshParams"] != null)) {
                    base.Tables.Add(new MeshParamsDataTable(ds.Tables["MeshParams"]));
                }
                if ((ds.Tables["Nodes"] != null)) {
                    base.Tables.Add(new NodesDataTable(ds.Tables["Nodes"]));
                }
                if ((ds.Tables["Points"] != null)) {
                    base.Tables.Add(new PointsDataTable(ds.Tables["Points"]));
                }
                if ((ds.Tables["StrainNodeParameters"] != null)) {
                    base.Tables.Add(new StrainNodeParametersDataTable(ds.Tables["StrainNodeParameters"]));
                }
                if ((ds.Tables["StressNodeParameters"] != null)) {
                    base.Tables.Add(new StressNodeParametersDataTable(ds.Tables["StressNodeParameters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdjacmentResearchDataTable AdjacmentResearch {
            get {
                return this.tableAdjacmentResearch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdjacmentResearchsDataTable AdjacmentResearchs {
            get {
                return this.tableAdjacmentResearchs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AreasDataTable Areas {
            get {
                return this.tableAreas;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DbscanResearchDataTable DbscanResearch {
            get {
                return this.tableDbscanResearch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DbScanResearchsDataTable DbScanResearchs {
            get {
                return this.tableDbScanResearchs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ElementsDataTable Elements {
            get {
                return this.tableElements;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MeshParamsDataTable MeshParams {
            get {
                return this.tableMeshParams;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NodesDataTable Nodes {
            get {
                return this.tableNodes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PointsDataTable Points {
            get {
                return this.tablePoints;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StrainNodeParametersDataTable StrainNodeParameters {
            get {
                return this.tableStrainNodeParameters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StressNodeParametersDataTable StressNodeParameters {
            get {
                return this.tableStressNodeParameters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AdjacmentResearch"] != null)) {
                    base.Tables.Add(new AdjacmentResearchDataTable(ds.Tables["AdjacmentResearch"]));
                }
                if ((ds.Tables["AdjacmentResearchs"] != null)) {
                    base.Tables.Add(new AdjacmentResearchsDataTable(ds.Tables["AdjacmentResearchs"]));
                }
                if ((ds.Tables["Areas"] != null)) {
                    base.Tables.Add(new AreasDataTable(ds.Tables["Areas"]));
                }
                if ((ds.Tables["DbscanResearch"] != null)) {
                    base.Tables.Add(new DbscanResearchDataTable(ds.Tables["DbscanResearch"]));
                }
                if ((ds.Tables["DbScanResearchs"] != null)) {
                    base.Tables.Add(new DbScanResearchsDataTable(ds.Tables["DbScanResearchs"]));
                }
                if ((ds.Tables["Elements"] != null)) {
                    base.Tables.Add(new ElementsDataTable(ds.Tables["Elements"]));
                }
                if ((ds.Tables["MeshParams"] != null)) {
                    base.Tables.Add(new MeshParamsDataTable(ds.Tables["MeshParams"]));
                }
                if ((ds.Tables["Nodes"] != null)) {
                    base.Tables.Add(new NodesDataTable(ds.Tables["Nodes"]));
                }
                if ((ds.Tables["Points"] != null)) {
                    base.Tables.Add(new PointsDataTable(ds.Tables["Points"]));
                }
                if ((ds.Tables["StrainNodeParameters"] != null)) {
                    base.Tables.Add(new StrainNodeParametersDataTable(ds.Tables["StrainNodeParameters"]));
                }
                if ((ds.Tables["StressNodeParameters"] != null)) {
                    base.Tables.Add(new StressNodeParametersDataTable(ds.Tables["StressNodeParameters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableAdjacmentResearch = ((AdjacmentResearchDataTable)(base.Tables["AdjacmentResearch"]));
            if ((initTable == true)) {
                if ((this.tableAdjacmentResearch != null)) {
                    this.tableAdjacmentResearch.InitVars();
                }
            }
            this.tableAdjacmentResearchs = ((AdjacmentResearchsDataTable)(base.Tables["AdjacmentResearchs"]));
            if ((initTable == true)) {
                if ((this.tableAdjacmentResearchs != null)) {
                    this.tableAdjacmentResearchs.InitVars();
                }
            }
            this.tableAreas = ((AreasDataTable)(base.Tables["Areas"]));
            if ((initTable == true)) {
                if ((this.tableAreas != null)) {
                    this.tableAreas.InitVars();
                }
            }
            this.tableDbscanResearch = ((DbscanResearchDataTable)(base.Tables["DbscanResearch"]));
            if ((initTable == true)) {
                if ((this.tableDbscanResearch != null)) {
                    this.tableDbscanResearch.InitVars();
                }
            }
            this.tableDbScanResearchs = ((DbScanResearchsDataTable)(base.Tables["DbScanResearchs"]));
            if ((initTable == true)) {
                if ((this.tableDbScanResearchs != null)) {
                    this.tableDbScanResearchs.InitVars();
                }
            }
            this.tableElements = ((ElementsDataTable)(base.Tables["Elements"]));
            if ((initTable == true)) {
                if ((this.tableElements != null)) {
                    this.tableElements.InitVars();
                }
            }
            this.tableMeshParams = ((MeshParamsDataTable)(base.Tables["MeshParams"]));
            if ((initTable == true)) {
                if ((this.tableMeshParams != null)) {
                    this.tableMeshParams.InitVars();
                }
            }
            this.tableNodes = ((NodesDataTable)(base.Tables["Nodes"]));
            if ((initTable == true)) {
                if ((this.tableNodes != null)) {
                    this.tableNodes.InitVars();
                }
            }
            this.tablePoints = ((PointsDataTable)(base.Tables["Points"]));
            if ((initTable == true)) {
                if ((this.tablePoints != null)) {
                    this.tablePoints.InitVars();
                }
            }
            this.tableStrainNodeParameters = ((StrainNodeParametersDataTable)(base.Tables["StrainNodeParameters"]));
            if ((initTable == true)) {
                if ((this.tableStrainNodeParameters != null)) {
                    this.tableStrainNodeParameters.InitVars();
                }
            }
            this.tableStressNodeParameters = ((StressNodeParametersDataTable)(base.Tables["StressNodeParameters"]));
            if ((initTable == true)) {
                if ((this.tableStressNodeParameters != null)) {
                    this.tableStressNodeParameters.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAdjacmentResearch = new AdjacmentResearchDataTable();
            base.Tables.Add(this.tableAdjacmentResearch);
            this.tableAdjacmentResearchs = new AdjacmentResearchsDataTable();
            base.Tables.Add(this.tableAdjacmentResearchs);
            this.tableAreas = new AreasDataTable();
            base.Tables.Add(this.tableAreas);
            this.tableDbscanResearch = new DbscanResearchDataTable();
            base.Tables.Add(this.tableDbscanResearch);
            this.tableDbScanResearchs = new DbScanResearchsDataTable();
            base.Tables.Add(this.tableDbScanResearchs);
            this.tableElements = new ElementsDataTable();
            base.Tables.Add(this.tableElements);
            this.tableMeshParams = new MeshParamsDataTable();
            base.Tables.Add(this.tableMeshParams);
            this.tableNodes = new NodesDataTable();
            base.Tables.Add(this.tableNodes);
            this.tablePoints = new PointsDataTable();
            base.Tables.Add(this.tablePoints);
            this.tableStrainNodeParameters = new StrainNodeParametersDataTable();
            base.Tables.Add(this.tableStrainNodeParameters);
            this.tableStressNodeParameters = new StressNodeParametersDataTable();
            base.Tables.Add(this.tableStressNodeParameters);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeAdjacmentResearch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeAdjacmentResearchs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeAreas() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeDbscanResearch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeDbScanResearchs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeElements() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeMeshParams() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeNodes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializePoints() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeStrainNodeParameters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeStressNodeParameters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void AdjacmentResearchRowChangeEventHandler(object sender, AdjacmentResearchRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void AdjacmentResearchsRowChangeEventHandler(object sender, AdjacmentResearchsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void AreasRowChangeEventHandler(object sender, AreasRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void DbscanResearchRowChangeEventHandler(object sender, DbscanResearchRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void DbScanResearchsRowChangeEventHandler(object sender, DbScanResearchsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ElementsRowChangeEventHandler(object sender, ElementsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void MeshParamsRowChangeEventHandler(object sender, MeshParamsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void NodesRowChangeEventHandler(object sender, NodesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void PointsRowChangeEventHandler(object sender, PointsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void StrainNodeParametersRowChangeEventHandler(object sender, StrainNodeParametersRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void StressNodeParametersRowChangeEventHandler(object sender, StressNodeParametersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdjacmentResearchDataTable : global::System.Data.TypedTableBase<AdjacmentResearchRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchDataTable() {
                this.TableName = "AdjacmentResearch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AdjacmentResearchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected AdjacmentResearchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchRow this[int index] {
                get {
                    return ((AdjacmentResearchRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchRowChangeEventHandler AdjacmentResearchRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchRowChangeEventHandler AdjacmentResearchRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchRowChangeEventHandler AdjacmentResearchRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchRowChangeEventHandler AdjacmentResearchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddAdjacmentResearchRow(AdjacmentResearchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchRow AddAdjacmentResearchRow() {
                AdjacmentResearchRow rowAdjacmentResearchRow = ((AdjacmentResearchRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowAdjacmentResearchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdjacmentResearchRow);
                return rowAdjacmentResearchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AdjacmentResearchDataTable cln = ((AdjacmentResearchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdjacmentResearchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchRow NewAdjacmentResearchRow() {
                return ((AdjacmentResearchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdjacmentResearchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AdjacmentResearchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdjacmentResearchRowChanged != null)) {
                    this.AdjacmentResearchRowChanged(this, new AdjacmentResearchRowChangeEvent(((AdjacmentResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdjacmentResearchRowChanging != null)) {
                    this.AdjacmentResearchRowChanging(this, new AdjacmentResearchRowChangeEvent(((AdjacmentResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdjacmentResearchRowDeleted != null)) {
                    this.AdjacmentResearchRowDeleted(this, new AdjacmentResearchRowChangeEvent(((AdjacmentResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdjacmentResearchRowDeleting != null)) {
                    this.AdjacmentResearchRowDeleting(this, new AdjacmentResearchRowChangeEvent(((AdjacmentResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveAdjacmentResearchRow(AdjacmentResearchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdjacmentResearchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdjacmentResearchsDataTable : global::System.Data.TypedTableBase<AdjacmentResearchsRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchsDataTable() {
                this.TableName = "AdjacmentResearchs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AdjacmentResearchsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected AdjacmentResearchsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchsRow this[int index] {
                get {
                    return ((AdjacmentResearchsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchsRowChangeEventHandler AdjacmentResearchsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchsRowChangeEventHandler AdjacmentResearchsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchsRowChangeEventHandler AdjacmentResearchsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AdjacmentResearchsRowChangeEventHandler AdjacmentResearchsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddAdjacmentResearchsRow(AdjacmentResearchsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchsRow AddAdjacmentResearchsRow() {
                AdjacmentResearchsRow rowAdjacmentResearchsRow = ((AdjacmentResearchsRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowAdjacmentResearchsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdjacmentResearchsRow);
                return rowAdjacmentResearchsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AdjacmentResearchsDataTable cln = ((AdjacmentResearchsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdjacmentResearchsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchsRow NewAdjacmentResearchsRow() {
                return ((AdjacmentResearchsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdjacmentResearchsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AdjacmentResearchsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdjacmentResearchsRowChanged != null)) {
                    this.AdjacmentResearchsRowChanged(this, new AdjacmentResearchsRowChangeEvent(((AdjacmentResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdjacmentResearchsRowChanging != null)) {
                    this.AdjacmentResearchsRowChanging(this, new AdjacmentResearchsRowChangeEvent(((AdjacmentResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdjacmentResearchsRowDeleted != null)) {
                    this.AdjacmentResearchsRowDeleted(this, new AdjacmentResearchsRowChangeEvent(((AdjacmentResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdjacmentResearchsRowDeleting != null)) {
                    this.AdjacmentResearchsRowDeleting(this, new AdjacmentResearchsRowChangeEvent(((AdjacmentResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveAdjacmentResearchsRow(AdjacmentResearchsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdjacmentResearchsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AreasDataTable : global::System.Data.TypedTableBase<AreasRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AreasDataTable() {
                this.TableName = "Areas";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AreasDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected AreasDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AreasRow this[int index] {
                get {
                    return ((AreasRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AreasRowChangeEventHandler AreasRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AreasRowChangeEventHandler AreasRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AreasRowChangeEventHandler AreasRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AreasRowChangeEventHandler AreasRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddAreasRow(AreasRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AreasRow AddAreasRow() {
                AreasRow rowAreasRow = ((AreasRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowAreasRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAreasRow);
                return rowAreasRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AreasDataTable cln = ((AreasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AreasDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AreasRow NewAreasRow() {
                return ((AreasRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AreasRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AreasRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AreasRowChanged != null)) {
                    this.AreasRowChanged(this, new AreasRowChangeEvent(((AreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AreasRowChanging != null)) {
                    this.AreasRowChanging(this, new AreasRowChangeEvent(((AreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AreasRowDeleted != null)) {
                    this.AreasRowDeleted(this, new AreasRowChangeEvent(((AreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AreasRowDeleting != null)) {
                    this.AreasRowDeleting(this, new AreasRowChangeEvent(((AreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveAreasRow(AreasRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AreasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DbscanResearchDataTable : global::System.Data.TypedTableBase<DbscanResearchRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbscanResearchDataTable() {
                this.TableName = "DbscanResearch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal DbscanResearchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected DbscanResearchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbscanResearchRow this[int index] {
                get {
                    return ((DbscanResearchRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbscanResearchRowChangeEventHandler DbscanResearchRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbscanResearchRowChangeEventHandler DbscanResearchRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbscanResearchRowChangeEventHandler DbscanResearchRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbscanResearchRowChangeEventHandler DbscanResearchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddDbscanResearchRow(DbscanResearchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbscanResearchRow AddDbscanResearchRow() {
                DbscanResearchRow rowDbscanResearchRow = ((DbscanResearchRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowDbscanResearchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDbscanResearchRow);
                return rowDbscanResearchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                DbscanResearchDataTable cln = ((DbscanResearchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DbscanResearchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbscanResearchRow NewDbscanResearchRow() {
                return ((DbscanResearchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DbscanResearchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(DbscanResearchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DbscanResearchRowChanged != null)) {
                    this.DbscanResearchRowChanged(this, new DbscanResearchRowChangeEvent(((DbscanResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DbscanResearchRowChanging != null)) {
                    this.DbscanResearchRowChanging(this, new DbscanResearchRowChangeEvent(((DbscanResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DbscanResearchRowDeleted != null)) {
                    this.DbscanResearchRowDeleted(this, new DbscanResearchRowChangeEvent(((DbscanResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DbscanResearchRowDeleting != null)) {
                    this.DbscanResearchRowDeleting(this, new DbscanResearchRowChangeEvent(((DbscanResearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveDbscanResearchRow(DbscanResearchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DbscanResearchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DbScanResearchsDataTable : global::System.Data.TypedTableBase<DbScanResearchsRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbScanResearchsDataTable() {
                this.TableName = "DbScanResearchs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal DbScanResearchsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected DbScanResearchsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbScanResearchsRow this[int index] {
                get {
                    return ((DbScanResearchsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbScanResearchsRowChangeEventHandler DbScanResearchsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbScanResearchsRowChangeEventHandler DbScanResearchsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbScanResearchsRowChangeEventHandler DbScanResearchsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event DbScanResearchsRowChangeEventHandler DbScanResearchsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddDbScanResearchsRow(DbScanResearchsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbScanResearchsRow AddDbScanResearchsRow() {
                DbScanResearchsRow rowDbScanResearchsRow = ((DbScanResearchsRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowDbScanResearchsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDbScanResearchsRow);
                return rowDbScanResearchsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                DbScanResearchsDataTable cln = ((DbScanResearchsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DbScanResearchsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbScanResearchsRow NewDbScanResearchsRow() {
                return ((DbScanResearchsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DbScanResearchsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(DbScanResearchsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DbScanResearchsRowChanged != null)) {
                    this.DbScanResearchsRowChanged(this, new DbScanResearchsRowChangeEvent(((DbScanResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DbScanResearchsRowChanging != null)) {
                    this.DbScanResearchsRowChanging(this, new DbScanResearchsRowChangeEvent(((DbScanResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DbScanResearchsRowDeleted != null)) {
                    this.DbScanResearchsRowDeleted(this, new DbScanResearchsRowChangeEvent(((DbScanResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DbScanResearchsRowDeleting != null)) {
                    this.DbScanResearchsRowDeleting(this, new DbScanResearchsRowChangeEvent(((DbScanResearchsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveDbScanResearchsRow(DbScanResearchsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DbScanResearchsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ElementsDataTable : global::System.Data.TypedTableBase<ElementsRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ElementsDataTable() {
                this.TableName = "Elements";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ElementsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected ElementsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ElementsRow this[int index] {
                get {
                    return ((ElementsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ElementsRowChangeEventHandler ElementsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ElementsRowChangeEventHandler ElementsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ElementsRowChangeEventHandler ElementsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ElementsRowChangeEventHandler ElementsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddElementsRow(ElementsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ElementsRow AddElementsRow() {
                ElementsRow rowElementsRow = ((ElementsRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowElementsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowElementsRow);
                return rowElementsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ElementsDataTable cln = ((ElementsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ElementsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ElementsRow NewElementsRow() {
                return ((ElementsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ElementsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ElementsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ElementsRowChanged != null)) {
                    this.ElementsRowChanged(this, new ElementsRowChangeEvent(((ElementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ElementsRowChanging != null)) {
                    this.ElementsRowChanging(this, new ElementsRowChangeEvent(((ElementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ElementsRowDeleted != null)) {
                    this.ElementsRowDeleted(this, new ElementsRowChangeEvent(((ElementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ElementsRowDeleting != null)) {
                    this.ElementsRowDeleting(this, new ElementsRowChangeEvent(((ElementsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveElementsRow(ElementsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ElementsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MeshParamsDataTable : global::System.Data.TypedTableBase<MeshParamsRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public MeshParamsDataTable() {
                this.TableName = "MeshParams";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal MeshParamsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected MeshParamsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public MeshParamsRow this[int index] {
                get {
                    return ((MeshParamsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event MeshParamsRowChangeEventHandler MeshParamsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event MeshParamsRowChangeEventHandler MeshParamsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event MeshParamsRowChangeEventHandler MeshParamsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event MeshParamsRowChangeEventHandler MeshParamsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddMeshParamsRow(MeshParamsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public MeshParamsRow AddMeshParamsRow() {
                MeshParamsRow rowMeshParamsRow = ((MeshParamsRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowMeshParamsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMeshParamsRow);
                return rowMeshParamsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                MeshParamsDataTable cln = ((MeshParamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MeshParamsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public MeshParamsRow NewMeshParamsRow() {
                return ((MeshParamsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MeshParamsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(MeshParamsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MeshParamsRowChanged != null)) {
                    this.MeshParamsRowChanged(this, new MeshParamsRowChangeEvent(((MeshParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MeshParamsRowChanging != null)) {
                    this.MeshParamsRowChanging(this, new MeshParamsRowChangeEvent(((MeshParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MeshParamsRowDeleted != null)) {
                    this.MeshParamsRowDeleted(this, new MeshParamsRowChangeEvent(((MeshParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MeshParamsRowDeleting != null)) {
                    this.MeshParamsRowDeleting(this, new MeshParamsRowChangeEvent(((MeshParamsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveMeshParamsRow(MeshParamsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MeshParamsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NodesDataTable : global::System.Data.TypedTableBase<NodesRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NodesDataTable() {
                this.TableName = "Nodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal NodesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected NodesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NodesRow this[int index] {
                get {
                    return ((NodesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NodesRowChangeEventHandler NodesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NodesRowChangeEventHandler NodesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NodesRowChangeEventHandler NodesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event NodesRowChangeEventHandler NodesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddNodesRow(NodesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NodesRow AddNodesRow() {
                NodesRow rowNodesRow = ((NodesRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowNodesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNodesRow);
                return rowNodesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                NodesDataTable cln = ((NodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NodesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NodesRow NewNodesRow() {
                return ((NodesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NodesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(NodesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NodesRowChanged != null)) {
                    this.NodesRowChanged(this, new NodesRowChangeEvent(((NodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NodesRowChanging != null)) {
                    this.NodesRowChanging(this, new NodesRowChangeEvent(((NodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NodesRowDeleted != null)) {
                    this.NodesRowDeleted(this, new NodesRowChangeEvent(((NodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NodesRowDeleting != null)) {
                    this.NodesRowDeleting(this, new NodesRowChangeEvent(((NodesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveNodesRow(NodesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PointsDataTable : global::System.Data.TypedTableBase<PointsRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public PointsDataTable() {
                this.TableName = "Points";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal PointsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected PointsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public PointsRow this[int index] {
                get {
                    return ((PointsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event PointsRowChangeEventHandler PointsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event PointsRowChangeEventHandler PointsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event PointsRowChangeEventHandler PointsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event PointsRowChangeEventHandler PointsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddPointsRow(PointsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public PointsRow AddPointsRow() {
                PointsRow rowPointsRow = ((PointsRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowPointsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPointsRow);
                return rowPointsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PointsDataTable cln = ((PointsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PointsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public PointsRow NewPointsRow() {
                return ((PointsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PointsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PointsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PointsRowChanged != null)) {
                    this.PointsRowChanged(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PointsRowChanging != null)) {
                    this.PointsRowChanging(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PointsRowDeleted != null)) {
                    this.PointsRowDeleted(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PointsRowDeleting != null)) {
                    this.PointsRowDeleting(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovePointsRow(PointsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PointsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StrainNodeParametersDataTable : global::System.Data.TypedTableBase<StrainNodeParametersRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StrainNodeParametersDataTable() {
                this.TableName = "StrainNodeParameters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal StrainNodeParametersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected StrainNodeParametersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StrainNodeParametersRow this[int index] {
                get {
                    return ((StrainNodeParametersRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StrainNodeParametersRowChangeEventHandler StrainNodeParametersRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StrainNodeParametersRowChangeEventHandler StrainNodeParametersRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StrainNodeParametersRowChangeEventHandler StrainNodeParametersRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StrainNodeParametersRowChangeEventHandler StrainNodeParametersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddStrainNodeParametersRow(StrainNodeParametersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StrainNodeParametersRow AddStrainNodeParametersRow() {
                StrainNodeParametersRow rowStrainNodeParametersRow = ((StrainNodeParametersRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowStrainNodeParametersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStrainNodeParametersRow);
                return rowStrainNodeParametersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                StrainNodeParametersDataTable cln = ((StrainNodeParametersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StrainNodeParametersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StrainNodeParametersRow NewStrainNodeParametersRow() {
                return ((StrainNodeParametersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StrainNodeParametersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(StrainNodeParametersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StrainNodeParametersRowChanged != null)) {
                    this.StrainNodeParametersRowChanged(this, new StrainNodeParametersRowChangeEvent(((StrainNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StrainNodeParametersRowChanging != null)) {
                    this.StrainNodeParametersRowChanging(this, new StrainNodeParametersRowChangeEvent(((StrainNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StrainNodeParametersRowDeleted != null)) {
                    this.StrainNodeParametersRowDeleted(this, new StrainNodeParametersRowChangeEvent(((StrainNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StrainNodeParametersRowDeleting != null)) {
                    this.StrainNodeParametersRowDeleting(this, new StrainNodeParametersRowChangeEvent(((StrainNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveStrainNodeParametersRow(StrainNodeParametersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StrainNodeParametersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StressNodeParametersDataTable : global::System.Data.TypedTableBase<StressNodeParametersRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StressNodeParametersDataTable() {
                this.TableName = "StressNodeParameters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal StressNodeParametersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected StressNodeParametersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StressNodeParametersRow this[int index] {
                get {
                    return ((StressNodeParametersRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StressNodeParametersRowChangeEventHandler StressNodeParametersRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StressNodeParametersRowChangeEventHandler StressNodeParametersRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StressNodeParametersRowChangeEventHandler StressNodeParametersRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event StressNodeParametersRowChangeEventHandler StressNodeParametersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddStressNodeParametersRow(StressNodeParametersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StressNodeParametersRow AddStressNodeParametersRow() {
                StressNodeParametersRow rowStressNodeParametersRow = ((StressNodeParametersRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowStressNodeParametersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStressNodeParametersRow);
                return rowStressNodeParametersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                StressNodeParametersDataTable cln = ((StressNodeParametersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StressNodeParametersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StressNodeParametersRow NewStressNodeParametersRow() {
                return ((StressNodeParametersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StressNodeParametersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(StressNodeParametersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StressNodeParametersRowChanged != null)) {
                    this.StressNodeParametersRowChanged(this, new StressNodeParametersRowChangeEvent(((StressNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StressNodeParametersRowChanging != null)) {
                    this.StressNodeParametersRowChanging(this, new StressNodeParametersRowChangeEvent(((StressNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StressNodeParametersRowDeleted != null)) {
                    this.StressNodeParametersRowDeleted(this, new StressNodeParametersRowChangeEvent(((StressNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StressNodeParametersRowDeleting != null)) {
                    this.StressNodeParametersRowDeleting(this, new StressNodeParametersRowChangeEvent(((StressNodeParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveStressNodeParametersRow(StressNodeParametersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StressNodeParametersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AdjacmentResearchRow : global::System.Data.DataRow {
            
            private AdjacmentResearchDataTable tableAdjacmentResearch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AdjacmentResearchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdjacmentResearch = ((AdjacmentResearchDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AdjacmentResearchsRow : global::System.Data.DataRow {
            
            private AdjacmentResearchsDataTable tableAdjacmentResearchs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AdjacmentResearchsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdjacmentResearchs = ((AdjacmentResearchsDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AreasRow : global::System.Data.DataRow {
            
            private AreasDataTable tableAreas;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AreasRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAreas = ((AreasDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DbscanResearchRow : global::System.Data.DataRow {
            
            private DbscanResearchDataTable tableDbscanResearch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal DbscanResearchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDbscanResearch = ((DbscanResearchDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DbScanResearchsRow : global::System.Data.DataRow {
            
            private DbScanResearchsDataTable tableDbScanResearchs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal DbScanResearchsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDbScanResearchs = ((DbScanResearchsDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ElementsRow : global::System.Data.DataRow {
            
            private ElementsDataTable tableElements;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ElementsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableElements = ((ElementsDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class MeshParamsRow : global::System.Data.DataRow {
            
            private MeshParamsDataTable tableMeshParams;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal MeshParamsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMeshParams = ((MeshParamsDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NodesRow : global::System.Data.DataRow {
            
            private NodesDataTable tableNodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal NodesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNodes = ((NodesDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PointsRow : global::System.Data.DataRow {
            
            private PointsDataTable tablePoints;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal PointsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoints = ((PointsDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StrainNodeParametersRow : global::System.Data.DataRow {
            
            private StrainNodeParametersDataTable tableStrainNodeParameters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal StrainNodeParametersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStrainNodeParameters = ((StrainNodeParametersDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StressNodeParametersRow : global::System.Data.DataRow {
            
            private StressNodeParametersDataTable tableStressNodeParameters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal StressNodeParametersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStressNodeParameters = ((StressNodeParametersDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class AdjacmentResearchRowChangeEvent : global::System.EventArgs {
            
            private AdjacmentResearchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchRowChangeEvent(AdjacmentResearchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class AdjacmentResearchsRowChangeEvent : global::System.EventArgs {
            
            private AdjacmentResearchsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchsRowChangeEvent(AdjacmentResearchsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AdjacmentResearchsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class AreasRowChangeEvent : global::System.EventArgs {
            
            private AreasRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AreasRowChangeEvent(AreasRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AreasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class DbscanResearchRowChangeEvent : global::System.EventArgs {
            
            private DbscanResearchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbscanResearchRowChangeEvent(DbscanResearchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbscanResearchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class DbScanResearchsRowChangeEvent : global::System.EventArgs {
            
            private DbScanResearchsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbScanResearchsRowChangeEvent(DbScanResearchsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DbScanResearchsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ElementsRowChangeEvent : global::System.EventArgs {
            
            private ElementsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ElementsRowChangeEvent(ElementsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ElementsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class MeshParamsRowChangeEvent : global::System.EventArgs {
            
            private MeshParamsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public MeshParamsRowChangeEvent(MeshParamsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public MeshParamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class NodesRowChangeEvent : global::System.EventArgs {
            
            private NodesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NodesRowChangeEvent(NodesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public NodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class PointsRowChangeEvent : global::System.EventArgs {
            
            private PointsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public PointsRowChangeEvent(PointsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public PointsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class StrainNodeParametersRowChangeEvent : global::System.EventArgs {
            
            private StrainNodeParametersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StrainNodeParametersRowChangeEvent(StrainNodeParametersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StrainNodeParametersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class StressNodeParametersRowChangeEvent : global::System.EventArgs {
            
            private StressNodeParametersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StressNodeParametersRowChangeEvent(StressNodeParametersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public StressNodeParametersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ConsoleApp1.DataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AdjacmentResearchTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public AdjacmentResearchTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""AdjacmentResearch"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_coef1 = 1 AND ""coef1"" IS NULL) OR (""coef1"" = :Original_coef1)) AND ((:IsNull_coef2 = 1 AND ""coef2"" IS NULL) OR (""coef2"" = :Original_coef2)) AND ((:IsNull_filterParam = 1 AND ""filterParam"" IS NULL) OR (""filterParam"" = :Original_filterParam)) AND ((:IsNull_materialParam = 1 AND ""materialParam"" IS NULL) OR (""materialParam"" = :Original_materialParam)) AND ((:IsNull_meshParamsId = 1 AND ""meshParamsId"" IS NULL) OR (""meshParamsId"" = :Original_meshParamsId)) AND ((:IsNull_nodesIntersectionAmount = 1 AND ""nodesIntersectionAmount"" IS NULL) OR (""nodesIntersectionAmount"" = :Original_nodesIntersectionAmount)) AND ((:IsNull_squeezeCoef = 1 AND ""squeezeCoef"" IS NULL) OR (""squeezeCoef"" = :Original_squeezeCoef)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""AdjacmentResearch"" (""Id"", ""coef1"", ""coef2"", ""filterParam"", ""materialParam"", ""meshParamsId"", ""nodesIntersectionAmount"", ""squeezeCoef"") VALUES (:Id, :coef1, :coef2, :filterParam, :materialParam, :meshParamsId, :nodesIntersectionAmount, :squeezeCoef)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""AdjacmentResearch"" SET ""Id"" = :Id, ""coef1"" = :coef1, ""coef2"" = :coef2, ""filterParam"" = :filterParam, ""materialParam"" = :materialParam, ""meshParamsId"" = :meshParamsId, ""nodesIntersectionAmount"" = :nodesIntersectionAmount, ""squeezeCoef"" = :squeezeCoef WHERE ((""Id"" = :Original_Id) AND ((:IsNull_coef1 = 1 AND ""coef1"" IS NULL) OR (""coef1"" = :Original_coef1)) AND ((:IsNull_coef2 = 1 AND ""coef2"" IS NULL) OR (""coef2"" = :Original_coef2)) AND ((:IsNull_filterParam = 1 AND ""filterParam"" IS NULL) OR (""filterParam"" = :Original_filterParam)) AND ((:IsNull_materialParam = 1 AND ""materialParam"" IS NULL) OR (""materialParam"" = :Original_materialParam)) AND ((:IsNull_meshParamsId = 1 AND ""meshParamsId"" IS NULL) OR (""meshParamsId"" = :Original_meshParamsId)) AND ((:IsNull_nodesIntersectionAmount = 1 AND ""nodesIntersectionAmount"" IS NULL) OR (""nodesIntersectionAmount"" = :Original_nodesIntersectionAmount)) AND ((:IsNull_squeezeCoef = 1 AND ""squeezeCoef"" IS NULL) OR (""squeezeCoef"" = :Original_squeezeCoef)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter16";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter17";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter18";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter19";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter20";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter21";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter22";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter23";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, coef1, coef2, filterParam, materialParam, meshParamsId, nodesIntersect" +
                "ionAmount, squeezeCoef FROM \"main\".AdjacmentResearch";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AdjacmentResearchDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AdjacmentResearchDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AdjacmentResearchDataTable dataTable = new DataSet1.AdjacmentResearchDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AdjacmentResearchDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "AdjacmentResearch");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12, string Parameter13, string Parameter14, string Parameter15) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Parameter1, 
                    string Parameter2, 
                    string Parameter3, 
                    string Parameter4, 
                    string Parameter5, 
                    string Parameter6, 
                    string Parameter7, 
                    string Parameter8, 
                    string Parameter9, 
                    string Parameter10, 
                    string Parameter11, 
                    string Parameter12, 
                    string Parameter13, 
                    string Parameter14, 
                    string Parameter15, 
                    string Parameter16, 
                    string Parameter17, 
                    string Parameter18, 
                    string Parameter19, 
                    string Parameter20, 
                    string Parameter21, 
                    string Parameter22, 
                    string Parameter23) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            if ((Parameter16 == null)) {
                throw new global::System.ArgumentNullException("Parameter16");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Parameter16));
            }
            if ((Parameter17 == null)) {
                throw new global::System.ArgumentNullException("Parameter17");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Parameter17));
            }
            if ((Parameter18 == null)) {
                throw new global::System.ArgumentNullException("Parameter18");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Parameter18));
            }
            if ((Parameter19 == null)) {
                throw new global::System.ArgumentNullException("Parameter19");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Parameter19));
            }
            if ((Parameter20 == null)) {
                throw new global::System.ArgumentNullException("Parameter20");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Parameter20));
            }
            if ((Parameter21 == null)) {
                throw new global::System.ArgumentNullException("Parameter21");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Parameter21));
            }
            if ((Parameter22 == null)) {
                throw new global::System.ArgumentNullException("Parameter22");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Parameter22));
            }
            if ((Parameter23 == null)) {
                throw new global::System.ArgumentNullException("Parameter23");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Parameter23));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AdjacmentResearchsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public AdjacmentResearchsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""AdjacmentResearchs"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_FilePath = 1 AND ""FilePath"" IS NULL) OR (""FilePath"" = :Original_FilePath)) AND ((:IsNull_ResearchId = 1 AND ""ResearchId"" IS NULL) OR (""ResearchId"" = :Original_ResearchId)) AND ((:IsNull_Title = 1 AND ""Title"" IS NULL) OR (""Title"" = :Original_Title)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"AdjacmentResearchs\" (\"Id\", \"FilePath\", \"ResearchId\", \"Title\")" +
                " VALUES (:Id, :FilePath, :ResearchId, :Title)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""AdjacmentResearchs"" SET ""Id"" = :Id, ""FilePath"" = :FilePath, ""ResearchId"" = :ResearchId, ""Title"" = :Title WHERE ((""Id"" = :Original_Id) AND ((:IsNull_FilePath = 1 AND ""FilePath"" IS NULL) OR (""FilePath"" = :Original_FilePath)) AND ((:IsNull_ResearchId = 1 AND ""ResearchId"" IS NULL) OR (""ResearchId"" = :Original_ResearchId)) AND ((:IsNull_Title = 1 AND ""Title"" IS NULL) OR (""Title"" = :Original_Title)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, FilePath, ResearchId, Title FROM \"main\".AdjacmentResearchs";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AdjacmentResearchsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AdjacmentResearchsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AdjacmentResearchsDataTable dataTable = new DataSet1.AdjacmentResearchsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AdjacmentResearchsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "AdjacmentResearchs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AreasTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public AreasTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Areas"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_AdjacmentResearchDbModelId = 1 AND ""AdjacmentResearchDbModelId"" IS NULL) OR (""AdjacmentResearchDbModelId"" = :Original_AdjacmentResearchDbModelId)) AND ((:IsNull_DbScanResearchDbModelId = 1 AND ""DbScanResearchDbModelId"" IS NULL) OR (""DbScanResearchDbModelId"" = :Original_DbScanResearchDbModelId)) AND (""Volume"" = :Original_Volume) AND ((:IsNull_areaCenterId = 1 AND ""areaCenterId"" IS NULL) OR (""areaCenterId"" = :Original_areaCenterId)) AND (""maxRadius"" = :Original_maxRadius))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Areas\" (\"Id\", \"AdjacmentResearchDbModelId\", \"DbScanResearchDb" +
                "ModelId\", \"Volume\", \"areaCenterId\", \"maxRadius\") VALUES (:Id, :AdjacmentResearch" +
                "DbModelId, :DbScanResearchDbModelId, :Volume, :areaCenterId, :maxRadius)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Areas"" SET ""Id"" = :Id, ""AdjacmentResearchDbModelId"" = :AdjacmentResearchDbModelId, ""DbScanResearchDbModelId"" = :DbScanResearchDbModelId, ""Volume"" = :Volume, ""areaCenterId"" = :areaCenterId, ""maxRadius"" = :maxRadius WHERE ((""Id"" = :Original_Id) AND ((:IsNull_AdjacmentResearchDbModelId = 1 AND ""AdjacmentResearchDbModelId"" IS NULL) OR (""AdjacmentResearchDbModelId"" = :Original_AdjacmentResearchDbModelId)) AND ((:IsNull_DbScanResearchDbModelId = 1 AND ""DbScanResearchDbModelId"" IS NULL) OR (""DbScanResearchDbModelId"" = :Original_DbScanResearchDbModelId)) AND (""Volume"" = :Original_Volume) AND ((:IsNull_areaCenterId = 1 AND ""areaCenterId"" IS NULL) OR (""areaCenterId"" = :Original_areaCenterId)) AND (""maxRadius"" = :Original_maxRadius))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, AdjacmentResearchDbModelId, DbScanResearchDbModelId, Volume, areaCente" +
                "rId, maxRadius FROM \"main\".Areas";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.AreasDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.AreasDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.AreasDataTable dataTable = new DataSet1.AreasDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.AreasDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Areas");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12, string Parameter13, string Parameter14, string Parameter15) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DbscanResearchTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public DbscanResearchTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""DbscanResearch"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_coef1 = 1 AND ""coef1"" IS NULL) OR (""coef1"" = :Original_coef1)) AND ((:IsNull_coef2 = 1 AND ""coef2"" IS NULL) OR (""coef2"" = :Original_coef2)) AND ((:IsNull_filterParam = 1 AND ""filterParam"" IS NULL) OR (""filterParam"" = :Original_filterParam)) AND ((:IsNull_materialParam = 1 AND ""materialParam"" IS NULL) OR (""materialParam"" = :Original_materialParam)) AND ((:IsNull_meshParamsId = 1 AND ""meshParamsId"" IS NULL) OR (""meshParamsId"" = :Original_meshParamsId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"DbscanResearch\" (\"Id\", \"coef1\", \"coef2\", \"filterParam\", \"mate" +
                "rialParam\", \"meshParamsId\") VALUES (:Id, :coef1, :coef2, :filterParam, :material" +
                "Param, :meshParamsId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""DbscanResearch"" SET ""Id"" = :Id, ""coef1"" = :coef1, ""coef2"" = :coef2, ""filterParam"" = :filterParam, ""materialParam"" = :materialParam, ""meshParamsId"" = :meshParamsId WHERE ((""Id"" = :Original_Id) AND ((:IsNull_coef1 = 1 AND ""coef1"" IS NULL) OR (""coef1"" = :Original_coef1)) AND ((:IsNull_coef2 = 1 AND ""coef2"" IS NULL) OR (""coef2"" = :Original_coef2)) AND ((:IsNull_filterParam = 1 AND ""filterParam"" IS NULL) OR (""filterParam"" = :Original_filterParam)) AND ((:IsNull_materialParam = 1 AND ""materialParam"" IS NULL) OR (""materialParam"" = :Original_materialParam)) AND ((:IsNull_meshParamsId = 1 AND ""meshParamsId"" IS NULL) OR (""meshParamsId"" = :Original_meshParamsId)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter16";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter17";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, coef1, coef2, filterParam, materialParam, meshParamsId FROM \"main\".Dbs" +
                "canResearch";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.DbscanResearchDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.DbscanResearchDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.DbscanResearchDataTable dataTable = new DataSet1.DbscanResearchDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.DbscanResearchDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "DbscanResearch");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Parameter1, 
                    string Parameter2, 
                    string Parameter3, 
                    string Parameter4, 
                    string Parameter5, 
                    string Parameter6, 
                    string Parameter7, 
                    string Parameter8, 
                    string Parameter9, 
                    string Parameter10, 
                    string Parameter11, 
                    string Parameter12, 
                    string Parameter13, 
                    string Parameter14, 
                    string Parameter15, 
                    string Parameter16, 
                    string Parameter17) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            if ((Parameter16 == null)) {
                throw new global::System.ArgumentNullException("Parameter16");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Parameter16));
            }
            if ((Parameter17 == null)) {
                throw new global::System.ArgumentNullException("Parameter17");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Parameter17));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DbScanResearchsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public DbScanResearchsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""DbScanResearchs"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_FilePath = 1 AND ""FilePath"" IS NULL) OR (""FilePath"" = :Original_FilePath)) AND ((:IsNull_ResearchId = 1 AND ""ResearchId"" IS NULL) OR (""ResearchId"" = :Original_ResearchId)) AND ((:IsNull_Title = 1 AND ""Title"" IS NULL) OR (""Title"" = :Original_Title)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"DbScanResearchs\" (\"Id\", \"FilePath\", \"ResearchId\", \"Title\") VA" +
                "LUES (:Id, :FilePath, :ResearchId, :Title)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""DbScanResearchs"" SET ""Id"" = :Id, ""FilePath"" = :FilePath, ""ResearchId"" = :ResearchId, ""Title"" = :Title WHERE ((""Id"" = :Original_Id) AND ((:IsNull_FilePath = 1 AND ""FilePath"" IS NULL) OR (""FilePath"" = :Original_FilePath)) AND ((:IsNull_ResearchId = 1 AND ""ResearchId"" IS NULL) OR (""ResearchId"" = :Original_ResearchId)) AND ((:IsNull_Title = 1 AND ""Title"" IS NULL) OR (""Title"" = :Original_Title)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, FilePath, ResearchId, Title FROM \"main\".DbScanResearchs";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.DbScanResearchsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.DbScanResearchsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.DbScanResearchsDataTable dataTable = new DataSet1.DbScanResearchsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.DbScanResearchsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "DbScanResearchs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ElementsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ElementsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Elements"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_AreaId = 1 AND ""AreaId"" IS NULL) OR (""AreaId"" = :Original_AreaId)) AND ((:IsNull_centerId = 1 AND ""centerId"" IS NULL) OR (""centerId"" = :Original_centerId)) AND (""number"" = :Original_number))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Elements\" (\"Id\", \"AreaId\", \"centerId\", \"number\") VALUES (:Id," +
                " :AreaId, :centerId, :number)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Elements"" SET ""Id"" = :Id, ""AreaId"" = :AreaId, ""centerId"" = :centerId, ""number"" = :number WHERE ((""Id"" = :Original_Id) AND ((:IsNull_AreaId = 1 AND ""AreaId"" IS NULL) OR (""AreaId"" = :Original_AreaId)) AND ((:IsNull_centerId = 1 AND ""centerId"" IS NULL) OR (""centerId"" = :Original_centerId)) AND (""number"" = :Original_number))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, AreaId, centerId, number FROM \"main\".Elements";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ElementsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.ElementsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.ElementsDataTable dataTable = new DataSet1.ElementsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.ElementsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Elements");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MeshParamsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public MeshParamsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""MeshParams"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_GrowthRatio = 1 AND ""GrowthRatio"" IS NULL) OR (""GrowthRatio"" = :Original_GrowthRatio)) AND ((:IsNull_MesherType = 1 AND ""MesherType"" IS NULL) OR (""MesherType"" = :Original_MesherType)) AND ((:IsNull_MinElementsInCircle = 1 AND ""MinElementsInCircle"" IS NULL) OR (""MinElementsInCircle"" = :Original_MinElementsInCircle)) AND ((:IsNull_Quality = 1 AND ""Quality"" IS NULL) OR (""Quality"" = :Original_Quality)) AND ((:IsNull_SaveSettingsWithoutMeshing = 1 AND ""SaveSettingsWithoutMeshing"" IS NULL) OR (""SaveSettingsWithoutMeshing"" = :Original_SaveSettingsWithoutMeshing)) AND ((:IsNull_Unit = 1 AND ""Unit"" IS NULL) OR (""Unit"" = :Original_Unit)) AND ((:IsNull_UseJacobianCheck = 1 AND ""UseJacobianCheck"" IS NULL) OR (""UseJacobianCheck"" = :Original_UseJacobianCheck)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""main"".""MeshParams"" (""Id"", ""GrowthRatio"", ""MesherType"", ""MinElementsInCircle"", ""Quality"", ""SaveSettingsWithoutMeshing"", ""Unit"", ""UseJacobianCheck"") VALUES (:Id, :GrowthRatio, :MesherType, :MinElementsInCircle, :Quality, :SaveSettingsWithoutMeshing, :Unit, :UseJacobianCheck)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""MeshParams"" SET ""Id"" = :Id, ""GrowthRatio"" = :GrowthRatio, ""MesherType"" = :MesherType, ""MinElementsInCircle"" = :MinElementsInCircle, ""Quality"" = :Quality, ""SaveSettingsWithoutMeshing"" = :SaveSettingsWithoutMeshing, ""Unit"" = :Unit, ""UseJacobianCheck"" = :UseJacobianCheck WHERE ((""Id"" = :Original_Id) AND ((:IsNull_GrowthRatio = 1 AND ""GrowthRatio"" IS NULL) OR (""GrowthRatio"" = :Original_GrowthRatio)) AND ((:IsNull_MesherType = 1 AND ""MesherType"" IS NULL) OR (""MesherType"" = :Original_MesherType)) AND ((:IsNull_MinElementsInCircle = 1 AND ""MinElementsInCircle"" IS NULL) OR (""MinElementsInCircle"" = :Original_MinElementsInCircle)) AND ((:IsNull_Quality = 1 AND ""Quality"" IS NULL) OR (""Quality"" = :Original_Quality)) AND ((:IsNull_SaveSettingsWithoutMeshing = 1 AND ""SaveSettingsWithoutMeshing"" IS NULL) OR (""SaveSettingsWithoutMeshing"" = :Original_SaveSettingsWithoutMeshing)) AND ((:IsNull_Unit = 1 AND ""Unit"" IS NULL) OR (""Unit"" = :Original_Unit)) AND ((:IsNull_UseJacobianCheck = 1 AND ""UseJacobianCheck"" IS NULL) OR (""UseJacobianCheck"" = :Original_UseJacobianCheck)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter16";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter17";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter18";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter19";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter20";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter21";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter22";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter23";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, GrowthRatio, MesherType, MinElementsInCircle, Quality, SaveSettingsWit" +
                "houtMeshing, Unit, UseJacobianCheck FROM \"main\".MeshParams";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.MeshParamsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.MeshParamsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.MeshParamsDataTable dataTable = new DataSet1.MeshParamsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.MeshParamsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "MeshParams");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12, string Parameter13, string Parameter14, string Parameter15) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Parameter1, 
                    string Parameter2, 
                    string Parameter3, 
                    string Parameter4, 
                    string Parameter5, 
                    string Parameter6, 
                    string Parameter7, 
                    string Parameter8, 
                    string Parameter9, 
                    string Parameter10, 
                    string Parameter11, 
                    string Parameter12, 
                    string Parameter13, 
                    string Parameter14, 
                    string Parameter15, 
                    string Parameter16, 
                    string Parameter17, 
                    string Parameter18, 
                    string Parameter19, 
                    string Parameter20, 
                    string Parameter21, 
                    string Parameter22, 
                    string Parameter23) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            if ((Parameter16 == null)) {
                throw new global::System.ArgumentNullException("Parameter16");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Parameter16));
            }
            if ((Parameter17 == null)) {
                throw new global::System.ArgumentNullException("Parameter17");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Parameter17));
            }
            if ((Parameter18 == null)) {
                throw new global::System.ArgumentNullException("Parameter18");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Parameter18));
            }
            if ((Parameter19 == null)) {
                throw new global::System.ArgumentNullException("Parameter19");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Parameter19));
            }
            if ((Parameter20 == null)) {
                throw new global::System.ArgumentNullException("Parameter20");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Parameter20));
            }
            if ((Parameter21 == null)) {
                throw new global::System.ArgumentNullException("Parameter21");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Parameter21));
            }
            if ((Parameter22 == null)) {
                throw new global::System.ArgumentNullException("Parameter22");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Parameter22));
            }
            if ((Parameter23 == null)) {
                throw new global::System.ArgumentNullException("Parameter23");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Parameter23));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NodesTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public NodesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""Nodes"" WHERE ((""Id"" = :Original_Id) AND ((:IsNull_AreaId = 1 AND ""AreaId"" IS NULL) OR (""AreaId"" = :Original_AreaId)) AND ((:IsNull_ElementId = 1 AND ""ElementId"" IS NULL) OR (""ElementId"" = :Original_ElementId)) AND ((:IsNull_ElementId1 = 1 AND ""ElementId1"" IS NULL) OR (""ElementId1"" = :Original_ElementId1)) AND (""number"" = :Original_number) AND ((:IsNull_pointId = 1 AND ""pointId"" IS NULL) OR (""pointId"" = :Original_pointId)) AND ((:IsNull_strainId = 1 AND ""strainId"" IS NULL) OR (""strainId"" = :Original_strainId)) AND ((:IsNull_stressId = 1 AND ""stressId"" IS NULL) OR (""stressId"" = :Original_stressId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Nodes\" (\"Id\", \"AreaId\", \"ElementId\", \"ElementId1\", \"number\", " +
                "\"pointId\", \"strainId\", \"stressId\") VALUES (:Id, :AreaId, :ElementId, :ElementId1" +
                ", :number, :pointId, :strainId, :stressId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""Nodes"" SET ""Id"" = :Id, ""AreaId"" = :AreaId, ""ElementId"" = :ElementId, ""ElementId1"" = :ElementId1, ""number"" = :number, ""pointId"" = :pointId, ""strainId"" = :strainId, ""stressId"" = :stressId WHERE ((""Id"" = :Original_Id) AND ((:IsNull_AreaId = 1 AND ""AreaId"" IS NULL) OR (""AreaId"" = :Original_AreaId)) AND ((:IsNull_ElementId = 1 AND ""ElementId"" IS NULL) OR (""ElementId"" = :Original_ElementId)) AND ((:IsNull_ElementId1 = 1 AND ""ElementId1"" IS NULL) OR (""ElementId1"" = :Original_ElementId1)) AND (""number"" = :Original_number) AND ((:IsNull_pointId = 1 AND ""pointId"" IS NULL) OR (""pointId"" = :Original_pointId)) AND ((:IsNull_strainId = 1 AND ""strainId"" IS NULL) OR (""strainId"" = :Original_strainId)) AND ((:IsNull_stressId = 1 AND ""stressId"" IS NULL) OR (""stressId"" = :Original_stressId)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter16";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter17";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter18";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter19";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter20";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter21";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter22";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, AreaId, ElementId, ElementId1, number, pointId, strainId, stressId FRO" +
                "M \"main\".Nodes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.NodesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.NodesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.NodesDataTable dataTable = new DataSet1.NodesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.NodesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Nodes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12, string Parameter13, string Parameter14) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Parameter1, 
                    string Parameter2, 
                    string Parameter3, 
                    string Parameter4, 
                    string Parameter5, 
                    string Parameter6, 
                    string Parameter7, 
                    string Parameter8, 
                    string Parameter9, 
                    string Parameter10, 
                    string Parameter11, 
                    string Parameter12, 
                    string Parameter13, 
                    string Parameter14, 
                    string Parameter15, 
                    string Parameter16, 
                    string Parameter17, 
                    string Parameter18, 
                    string Parameter19, 
                    string Parameter20, 
                    string Parameter21, 
                    string Parameter22) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            if ((Parameter16 == null)) {
                throw new global::System.ArgumentNullException("Parameter16");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Parameter16));
            }
            if ((Parameter17 == null)) {
                throw new global::System.ArgumentNullException("Parameter17");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Parameter17));
            }
            if ((Parameter18 == null)) {
                throw new global::System.ArgumentNullException("Parameter18");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Parameter18));
            }
            if ((Parameter19 == null)) {
                throw new global::System.ArgumentNullException("Parameter19");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Parameter19));
            }
            if ((Parameter20 == null)) {
                throw new global::System.ArgumentNullException("Parameter20");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Parameter20));
            }
            if ((Parameter21 == null)) {
                throw new global::System.ArgumentNullException("Parameter21");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Parameter21));
            }
            if ((Parameter22 == null)) {
                throw new global::System.ArgumentNullException("Parameter22");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Parameter22));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PointsTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public PointsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"main\".\"Points\" WHERE ((\"Id\" = :Original_Id) AND (\"x\" = :Original_x) " +
                "AND (\"y\" = :Original_y) AND (\"z\" = :Original_z))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"Points\" (\"Id\", \"x\", \"y\", \"z\") VALUES (:Id, :x, :y, :z)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"main\".\"Points\" SET \"Id\" = :Id, \"x\" = :x, \"y\" = :y, \"z\" = :z WHERE ((\"Id\" " +
                "= :Original_Id) AND (\"x\" = :Original_x) AND (\"y\" = :Original_y) AND (\"z\" = :Orig" +
                "inal_z))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, x, y, z FROM \"main\".Points";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.PointsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.PointsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.PointsDataTable dataTable = new DataSet1.PointsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.PointsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Points");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StrainNodeParametersTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public StrainNodeParametersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""StrainNodeParameters"" WHERE ((""Id"" = :Original_Id) AND (""E1"" = :Original_E1) AND (""E2"" = :Original_E2) AND (""E3"" = :Original_E3) AND (""ENERGY"" = :Original_ENERGY) AND (""EPSx"" = :Original_EPSx) AND (""EPSy"" = :Original_EPSy) AND (""EPSz"" = :Original_EPSz) AND (""ESTRN"" = :Original_ESTRN) AND (""GMxy"" = :Original_GMxy) AND (""GMxz"" = :Original_GMxz) AND (""GMyz"" = :Original_GMyz) AND (""SEDENS"" = :Original_SEDENS))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"StrainNodeParameters\" (\"Id\", \"E1\", \"E2\", \"E3\", \"ENERGY\", \"EPS" +
                "x\", \"EPSy\", \"EPSz\", \"ESTRN\", \"GMxy\", \"GMxz\", \"GMyz\", \"SEDENS\") VALUES (:Id, :E1," +
                " :E2, :E3, :ENERGY, :EPSx, :EPSy, :EPSz, :ESTRN, :GMxy, :GMxz, :GMyz, :SEDENS)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""StrainNodeParameters"" SET ""Id"" = :Id, ""E1"" = :E1, ""E2"" = :E2, ""E3"" = :E3, ""ENERGY"" = :ENERGY, ""EPSx"" = :EPSx, ""EPSy"" = :EPSy, ""EPSz"" = :EPSz, ""ESTRN"" = :ESTRN, ""GMxy"" = :GMxy, ""GMxz"" = :GMxz, ""GMyz"" = :GMyz, ""SEDENS"" = :SEDENS WHERE ((""Id"" = :Original_Id) AND (""E1"" = :Original_E1) AND (""E2"" = :Original_E2) AND (""E3"" = :Original_E3) AND (""ENERGY"" = :Original_ENERGY) AND (""EPSx"" = :Original_EPSx) AND (""EPSy"" = :Original_EPSy) AND (""EPSz"" = :Original_EPSz) AND (""ESTRN"" = :Original_ESTRN) AND (""GMxy"" = :Original_GMxy) AND (""GMxz"" = :Original_GMxz) AND (""GMyz"" = :Original_GMyz) AND (""SEDENS"" = :Original_SEDENS))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter16";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter17";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter18";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter19";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter20";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter21";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter22";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter23";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter24";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter25";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter26";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, E1, E2, E3, ENERGY, EPSx, EPSy, EPSz, ESTRN, GMxy, GMxz, GMyz, SEDENS " +
                "FROM \"main\".StrainNodeParameters";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.StrainNodeParametersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.StrainNodeParametersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.StrainNodeParametersDataTable dataTable = new DataSet1.StrainNodeParametersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.StrainNodeParametersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "StrainNodeParameters");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12, string Parameter13) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12, string Parameter13) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Parameter1, 
                    string Parameter2, 
                    string Parameter3, 
                    string Parameter4, 
                    string Parameter5, 
                    string Parameter6, 
                    string Parameter7, 
                    string Parameter8, 
                    string Parameter9, 
                    string Parameter10, 
                    string Parameter11, 
                    string Parameter12, 
                    string Parameter13, 
                    string Parameter14, 
                    string Parameter15, 
                    string Parameter16, 
                    string Parameter17, 
                    string Parameter18, 
                    string Parameter19, 
                    string Parameter20, 
                    string Parameter21, 
                    string Parameter22, 
                    string Parameter23, 
                    string Parameter24, 
                    string Parameter25, 
                    string Parameter26) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            if ((Parameter16 == null)) {
                throw new global::System.ArgumentNullException("Parameter16");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Parameter16));
            }
            if ((Parameter17 == null)) {
                throw new global::System.ArgumentNullException("Parameter17");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Parameter17));
            }
            if ((Parameter18 == null)) {
                throw new global::System.ArgumentNullException("Parameter18");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Parameter18));
            }
            if ((Parameter19 == null)) {
                throw new global::System.ArgumentNullException("Parameter19");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Parameter19));
            }
            if ((Parameter20 == null)) {
                throw new global::System.ArgumentNullException("Parameter20");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Parameter20));
            }
            if ((Parameter21 == null)) {
                throw new global::System.ArgumentNullException("Parameter21");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Parameter21));
            }
            if ((Parameter22 == null)) {
                throw new global::System.ArgumentNullException("Parameter22");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Parameter22));
            }
            if ((Parameter23 == null)) {
                throw new global::System.ArgumentNullException("Parameter23");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Parameter23));
            }
            if ((Parameter24 == null)) {
                throw new global::System.ArgumentNullException("Parameter24");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Parameter24));
            }
            if ((Parameter25 == null)) {
                throw new global::System.ArgumentNullException("Parameter25");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Parameter25));
            }
            if ((Parameter26 == null)) {
                throw new global::System.ArgumentNullException("Parameter26");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Parameter26));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StressNodeParametersTableAdapter : global::System.ComponentModel.Component {
        
        private global::Devart.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::Devart.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.Common.DbTransaction _transaction;
        
        private global::Devart.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public StressNodeParametersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Devart.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Devart.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Devart.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.Common.DbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Devart.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Devart.Data.SQLite.SQLiteDataAdapter();
            this._adapter.DeleteCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""main"".""StressNodeParameters"" WHERE ((""Id"" = :Original_Id) AND (""INT"" = :Original_INT) AND (""P1"" = :Original_P1) AND (""P2"" = :Original_P2) AND (""P3"" = :Original_P3) AND (""Sx"" = :Original_Sx) AND (""Sy"" = :Original_Sy) AND (""Sz"" = :Original_Sz) AND (""Txy"" = :Original_Txy) AND (""Txz"" = :Original_Txz) AND (""Tyz"" = :Original_Tyz) AND (""VON"" = :Original_VON))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Devart.Data.SQLite.SQLiteParameter param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"main\".\"StressNodeParameters\" (\"Id\", \"INT\", \"P1\", \"P2\", \"P3\", \"Sx\", \"" +
                "Sy\", \"Sz\", \"Txy\", \"Txz\", \"Tyz\", \"VON\") VALUES (:Id, :INT, :P1, :P2, :P3, :Sx, :S" +
                "y, :Sz, :Txy, :Txz, :Tyz, :VON)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Devart.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""main"".""StressNodeParameters"" SET ""Id"" = :Id, ""INT"" = :INT, ""P1"" = :P1, ""P2"" = :P2, ""P3"" = :P3, ""Sx"" = :Sx, ""Sy"" = :Sy, ""Sz"" = :Sz, ""Txy"" = :Txy, ""Txz"" = :Txz, ""Tyz"" = :Tyz, ""VON"" = :VON WHERE ((""Id"" = :Original_Id) AND (""INT"" = :Original_INT) AND (""P1"" = :Original_P1) AND (""P2"" = :Original_P2) AND (""P3"" = :Original_P3) AND (""Sx"" = :Original_Sx) AND (""Sy"" = :Original_Sy) AND (""Sz"" = :Original_Sz) AND (""Txy"" = :Original_Txy) AND (""Txz"" = :Original_Txz) AND (""Tyz"" = :Original_Tyz) AND (""VON"" = :Original_VON))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter1";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter3";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter4";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter5";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter6";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter7";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter8";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter9";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter10";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter11";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter12";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter13";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter14";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter15";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter16";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter17";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter18";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter19";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter20";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter21";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter22";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter23";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Devart.Data.SQLite.SQLiteParameter();
            param.ParameterName = "Parameter24";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Devart.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::ConsoleApp1.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Devart.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::Devart.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, INT, P1, P2, P3, Sx, Sy, Sz, Txy, Txz, Tyz, VON FROM \"main\".StressNode" +
                "Parameters";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.StressNodeParametersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.StressNodeParametersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.StressNodeParametersDataTable dataTable = new DataSet1.StressNodeParametersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.StressNodeParametersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "StressNodeParameters");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Parameter1, string Parameter2, string Parameter3, string Parameter4, string Parameter5, string Parameter6, string Parameter7, string Parameter8, string Parameter9, string Parameter10, string Parameter11, string Parameter12) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Parameter1, 
                    string Parameter2, 
                    string Parameter3, 
                    string Parameter4, 
                    string Parameter5, 
                    string Parameter6, 
                    string Parameter7, 
                    string Parameter8, 
                    string Parameter9, 
                    string Parameter10, 
                    string Parameter11, 
                    string Parameter12, 
                    string Parameter13, 
                    string Parameter14, 
                    string Parameter15, 
                    string Parameter16, 
                    string Parameter17, 
                    string Parameter18, 
                    string Parameter19, 
                    string Parameter20, 
                    string Parameter21, 
                    string Parameter22, 
                    string Parameter23, 
                    string Parameter24) {
            if ((Parameter1 == null)) {
                throw new global::System.ArgumentNullException("Parameter1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Parameter1));
            }
            if ((Parameter2 == null)) {
                throw new global::System.ArgumentNullException("Parameter2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Parameter2));
            }
            if ((Parameter3 == null)) {
                throw new global::System.ArgumentNullException("Parameter3");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Parameter3));
            }
            if ((Parameter4 == null)) {
                throw new global::System.ArgumentNullException("Parameter4");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Parameter4));
            }
            if ((Parameter5 == null)) {
                throw new global::System.ArgumentNullException("Parameter5");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Parameter5));
            }
            if ((Parameter6 == null)) {
                throw new global::System.ArgumentNullException("Parameter6");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Parameter6));
            }
            if ((Parameter7 == null)) {
                throw new global::System.ArgumentNullException("Parameter7");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Parameter7));
            }
            if ((Parameter8 == null)) {
                throw new global::System.ArgumentNullException("Parameter8");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Parameter8));
            }
            if ((Parameter9 == null)) {
                throw new global::System.ArgumentNullException("Parameter9");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Parameter9));
            }
            if ((Parameter10 == null)) {
                throw new global::System.ArgumentNullException("Parameter10");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Parameter10));
            }
            if ((Parameter11 == null)) {
                throw new global::System.ArgumentNullException("Parameter11");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Parameter11));
            }
            if ((Parameter12 == null)) {
                throw new global::System.ArgumentNullException("Parameter12");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Parameter12));
            }
            if ((Parameter13 == null)) {
                throw new global::System.ArgumentNullException("Parameter13");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Parameter13));
            }
            if ((Parameter14 == null)) {
                throw new global::System.ArgumentNullException("Parameter14");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Parameter14));
            }
            if ((Parameter15 == null)) {
                throw new global::System.ArgumentNullException("Parameter15");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Parameter15));
            }
            if ((Parameter16 == null)) {
                throw new global::System.ArgumentNullException("Parameter16");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Parameter16));
            }
            if ((Parameter17 == null)) {
                throw new global::System.ArgumentNullException("Parameter17");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Parameter17));
            }
            if ((Parameter18 == null)) {
                throw new global::System.ArgumentNullException("Parameter18");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Parameter18));
            }
            if ((Parameter19 == null)) {
                throw new global::System.ArgumentNullException("Parameter19");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Parameter19));
            }
            if ((Parameter20 == null)) {
                throw new global::System.ArgumentNullException("Parameter20");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Parameter20));
            }
            if ((Parameter21 == null)) {
                throw new global::System.ArgumentNullException("Parameter21");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Parameter21));
            }
            if ((Parameter22 == null)) {
                throw new global::System.ArgumentNullException("Parameter22");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Parameter22));
            }
            if ((Parameter23 == null)) {
                throw new global::System.ArgumentNullException("Parameter23");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Parameter23));
            }
            if ((Parameter24 == null)) {
                throw new global::System.ArgumentNullException("Parameter24");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Parameter24));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private AdjacmentResearchTableAdapter _adjacmentResearchTableAdapter;
        
        private AdjacmentResearchsTableAdapter _adjacmentResearchsTableAdapter;
        
        private AreasTableAdapter _areasTableAdapter;
        
        private DbscanResearchTableAdapter _dbscanResearchTableAdapter;
        
        private DbScanResearchsTableAdapter _dbScanResearchsTableAdapter;
        
        private ElementsTableAdapter _elementsTableAdapter;
        
        private MeshParamsTableAdapter _meshParamsTableAdapter;
        
        private NodesTableAdapter _nodesTableAdapter;
        
        private PointsTableAdapter _pointsTableAdapter;
        
        private StrainNodeParametersTableAdapter _strainNodeParametersTableAdapter;
        
        private StressNodeParametersTableAdapter _stressNodeParametersTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AdjacmentResearchTableAdapter AdjacmentResearchTableAdapter {
            get {
                return this._adjacmentResearchTableAdapter;
            }
            set {
                this._adjacmentResearchTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AdjacmentResearchsTableAdapter AdjacmentResearchsTableAdapter {
            get {
                return this._adjacmentResearchsTableAdapter;
            }
            set {
                this._adjacmentResearchsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AreasTableAdapter AreasTableAdapter {
            get {
                return this._areasTableAdapter;
            }
            set {
                this._areasTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public DbscanResearchTableAdapter DbscanResearchTableAdapter {
            get {
                return this._dbscanResearchTableAdapter;
            }
            set {
                this._dbscanResearchTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public DbScanResearchsTableAdapter DbScanResearchsTableAdapter {
            get {
                return this._dbScanResearchsTableAdapter;
            }
            set {
                this._dbScanResearchsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ElementsTableAdapter ElementsTableAdapter {
            get {
                return this._elementsTableAdapter;
            }
            set {
                this._elementsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public MeshParamsTableAdapter MeshParamsTableAdapter {
            get {
                return this._meshParamsTableAdapter;
            }
            set {
                this._meshParamsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public NodesTableAdapter NodesTableAdapter {
            get {
                return this._nodesTableAdapter;
            }
            set {
                this._nodesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PointsTableAdapter PointsTableAdapter {
            get {
                return this._pointsTableAdapter;
            }
            set {
                this._pointsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public StrainNodeParametersTableAdapter StrainNodeParametersTableAdapter {
            get {
                return this._strainNodeParametersTableAdapter;
            }
            set {
                this._strainNodeParametersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public StressNodeParametersTableAdapter StressNodeParametersTableAdapter {
            get {
                return this._stressNodeParametersTableAdapter;
            }
            set {
                this._stressNodeParametersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._adjacmentResearchTableAdapter != null) 
                            && (this._adjacmentResearchTableAdapter.Connection != null))) {
                    return this._adjacmentResearchTableAdapter.Connection;
                }
                if (((this._adjacmentResearchsTableAdapter != null) 
                            && (this._adjacmentResearchsTableAdapter.Connection != null))) {
                    return this._adjacmentResearchsTableAdapter.Connection;
                }
                if (((this._areasTableAdapter != null) 
                            && (this._areasTableAdapter.Connection != null))) {
                    return this._areasTableAdapter.Connection;
                }
                if (((this._dbscanResearchTableAdapter != null) 
                            && (this._dbscanResearchTableAdapter.Connection != null))) {
                    return this._dbscanResearchTableAdapter.Connection;
                }
                if (((this._dbScanResearchsTableAdapter != null) 
                            && (this._dbScanResearchsTableAdapter.Connection != null))) {
                    return this._dbScanResearchsTableAdapter.Connection;
                }
                if (((this._elementsTableAdapter != null) 
                            && (this._elementsTableAdapter.Connection != null))) {
                    return this._elementsTableAdapter.Connection;
                }
                if (((this._meshParamsTableAdapter != null) 
                            && (this._meshParamsTableAdapter.Connection != null))) {
                    return this._meshParamsTableAdapter.Connection;
                }
                if (((this._nodesTableAdapter != null) 
                            && (this._nodesTableAdapter.Connection != null))) {
                    return this._nodesTableAdapter.Connection;
                }
                if (((this._pointsTableAdapter != null) 
                            && (this._pointsTableAdapter.Connection != null))) {
                    return this._pointsTableAdapter.Connection;
                }
                if (((this._strainNodeParametersTableAdapter != null) 
                            && (this._strainNodeParametersTableAdapter.Connection != null))) {
                    return this._strainNodeParametersTableAdapter.Connection;
                }
                if (((this._stressNodeParametersTableAdapter != null) 
                            && (this._stressNodeParametersTableAdapter.Connection != null))) {
                    return this._stressNodeParametersTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._adjacmentResearchTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._adjacmentResearchsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._areasTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dbscanResearchTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dbScanResearchsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._elementsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._meshParamsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._nodesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pointsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._strainNodeParametersTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._stressNodeParametersTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._adjacmentResearchTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AdjacmentResearch.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._adjacmentResearchTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._adjacmentResearchsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AdjacmentResearchs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._adjacmentResearchsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._areasTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Areas.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._areasTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dbscanResearchTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DbscanResearch.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dbscanResearchTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dbScanResearchsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DbScanResearchs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dbScanResearchsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._elementsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Elements.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._elementsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._meshParamsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MeshParams.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._meshParamsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._nodesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Nodes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._nodesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pointsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Points.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pointsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._strainNodeParametersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.StrainNodeParameters.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._strainNodeParametersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._stressNodeParametersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.StressNodeParameters.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._stressNodeParametersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._adjacmentResearchTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AdjacmentResearch.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._adjacmentResearchTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._adjacmentResearchsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AdjacmentResearchs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._adjacmentResearchsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._areasTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Areas.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._areasTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dbscanResearchTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DbscanResearch.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dbscanResearchTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dbScanResearchsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DbScanResearchs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dbScanResearchsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._elementsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Elements.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._elementsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._meshParamsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MeshParams.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._meshParamsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._nodesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Nodes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._nodesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pointsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Points.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pointsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._strainNodeParametersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.StrainNodeParameters.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._strainNodeParametersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._stressNodeParametersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.StressNodeParameters.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._stressNodeParametersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._stressNodeParametersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.StressNodeParameters.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._stressNodeParametersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._strainNodeParametersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.StrainNodeParameters.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._strainNodeParametersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pointsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Points.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pointsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._nodesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Nodes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._nodesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._meshParamsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MeshParams.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._meshParamsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._elementsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Elements.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._elementsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dbScanResearchsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DbScanResearchs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dbScanResearchsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dbscanResearchTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DbscanResearch.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dbscanResearchTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._areasTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Areas.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._areasTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._adjacmentResearchsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AdjacmentResearchs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._adjacmentResearchsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._adjacmentResearchTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AdjacmentResearch.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._adjacmentResearchTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(DataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._adjacmentResearchTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._adjacmentResearchTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._adjacmentResearchsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._adjacmentResearchsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._areasTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._areasTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._dbscanResearchTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dbscanResearchTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._dbScanResearchsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dbScanResearchsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._elementsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._elementsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._meshParamsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._meshParamsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._nodesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._nodesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._pointsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pointsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._strainNodeParametersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._strainNodeParametersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._stressNodeParametersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._stressNodeParametersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт" +
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци" +
                        "и или текущее состояние не позволяет начать транзакцию.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._adjacmentResearchTableAdapter != null)) {
                    revertConnections.Add(this._adjacmentResearchTableAdapter, this._adjacmentResearchTableAdapter.Connection);
                    this._adjacmentResearchTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._adjacmentResearchTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._adjacmentResearchTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._adjacmentResearchTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._adjacmentResearchTableAdapter.Adapter);
                    }
                }
                if ((this._adjacmentResearchsTableAdapter != null)) {
                    revertConnections.Add(this._adjacmentResearchsTableAdapter, this._adjacmentResearchsTableAdapter.Connection);
                    this._adjacmentResearchsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._adjacmentResearchsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._adjacmentResearchsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._adjacmentResearchsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._adjacmentResearchsTableAdapter.Adapter);
                    }
                }
                if ((this._areasTableAdapter != null)) {
                    revertConnections.Add(this._areasTableAdapter, this._areasTableAdapter.Connection);
                    this._areasTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._areasTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._areasTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._areasTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._areasTableAdapter.Adapter);
                    }
                }
                if ((this._dbscanResearchTableAdapter != null)) {
                    revertConnections.Add(this._dbscanResearchTableAdapter, this._dbscanResearchTableAdapter.Connection);
                    this._dbscanResearchTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._dbscanResearchTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._dbscanResearchTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dbscanResearchTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dbscanResearchTableAdapter.Adapter);
                    }
                }
                if ((this._dbScanResearchsTableAdapter != null)) {
                    revertConnections.Add(this._dbScanResearchsTableAdapter, this._dbScanResearchsTableAdapter.Connection);
                    this._dbScanResearchsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._dbScanResearchsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._dbScanResearchsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dbScanResearchsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dbScanResearchsTableAdapter.Adapter);
                    }
                }
                if ((this._elementsTableAdapter != null)) {
                    revertConnections.Add(this._elementsTableAdapter, this._elementsTableAdapter.Connection);
                    this._elementsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._elementsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._elementsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._elementsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._elementsTableAdapter.Adapter);
                    }
                }
                if ((this._meshParamsTableAdapter != null)) {
                    revertConnections.Add(this._meshParamsTableAdapter, this._meshParamsTableAdapter.Connection);
                    this._meshParamsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._meshParamsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._meshParamsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._meshParamsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._meshParamsTableAdapter.Adapter);
                    }
                }
                if ((this._nodesTableAdapter != null)) {
                    revertConnections.Add(this._nodesTableAdapter, this._nodesTableAdapter.Connection);
                    this._nodesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._nodesTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._nodesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._nodesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._nodesTableAdapter.Adapter);
                    }
                }
                if ((this._pointsTableAdapter != null)) {
                    revertConnections.Add(this._pointsTableAdapter, this._pointsTableAdapter.Connection);
                    this._pointsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._pointsTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._pointsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pointsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pointsTableAdapter.Adapter);
                    }
                }
                if ((this._strainNodeParametersTableAdapter != null)) {
                    revertConnections.Add(this._strainNodeParametersTableAdapter, this._strainNodeParametersTableAdapter.Connection);
                    this._strainNodeParametersTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._strainNodeParametersTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._strainNodeParametersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._strainNodeParametersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._strainNodeParametersTableAdapter.Adapter);
                    }
                }
                if ((this._stressNodeParametersTableAdapter != null)) {
                    revertConnections.Add(this._stressNodeParametersTableAdapter, this._stressNodeParametersTableAdapter.Connection);
                    this._stressNodeParametersTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(workConnection));
                    this._stressNodeParametersTableAdapter.Transaction = ((global::System.Data.Common.DbTransaction)(workTransaction));
                    if (this._stressNodeParametersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._stressNodeParametersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._stressNodeParametersTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._adjacmentResearchTableAdapter != null)) {
                    this._adjacmentResearchTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._adjacmentResearchTableAdapter]));
                    this._adjacmentResearchTableAdapter.Transaction = null;
                }
                if ((this._adjacmentResearchsTableAdapter != null)) {
                    this._adjacmentResearchsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._adjacmentResearchsTableAdapter]));
                    this._adjacmentResearchsTableAdapter.Transaction = null;
                }
                if ((this._areasTableAdapter != null)) {
                    this._areasTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._areasTableAdapter]));
                    this._areasTableAdapter.Transaction = null;
                }
                if ((this._dbscanResearchTableAdapter != null)) {
                    this._dbscanResearchTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._dbscanResearchTableAdapter]));
                    this._dbscanResearchTableAdapter.Transaction = null;
                }
                if ((this._dbScanResearchsTableAdapter != null)) {
                    this._dbScanResearchsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._dbScanResearchsTableAdapter]));
                    this._dbScanResearchsTableAdapter.Transaction = null;
                }
                if ((this._elementsTableAdapter != null)) {
                    this._elementsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._elementsTableAdapter]));
                    this._elementsTableAdapter.Transaction = null;
                }
                if ((this._meshParamsTableAdapter != null)) {
                    this._meshParamsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._meshParamsTableAdapter]));
                    this._meshParamsTableAdapter.Transaction = null;
                }
                if ((this._nodesTableAdapter != null)) {
                    this._nodesTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._nodesTableAdapter]));
                    this._nodesTableAdapter.Transaction = null;
                }
                if ((this._pointsTableAdapter != null)) {
                    this._pointsTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._pointsTableAdapter]));
                    this._pointsTableAdapter.Transaction = null;
                }
                if ((this._strainNodeParametersTableAdapter != null)) {
                    this._strainNodeParametersTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._strainNodeParametersTableAdapter]));
                    this._strainNodeParametersTableAdapter.Transaction = null;
                }
                if ((this._stressNodeParametersTableAdapter != null)) {
                    this._stressNodeParametersTableAdapter.Connection = ((global::Devart.Data.SQLite.SQLiteConnection)(revertConnections[this._stressNodeParametersTableAdapter]));
                    this._stressNodeParametersTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591